#= Test ewens/Rsample() in stewart.jl by enumerating many configs using Rsample
  for smaller N, K, and comparing to probabilities computered by sprob.
=#
using DataStructures

@doc """ test_Rsample( T::Int64, N::Int64, K::Int64 )
Compare the probabilities of configurations for N and K computed by
   the exact formula used in the function sprob with the probabilities
   computed by many samples generated by the Rsample function which
   uses the method of Stewart to generate samples.
Returns the sum and maximum of absolute differences of the probabilities 
   generated by the two methods.  Both of these should converge to zero
   as T goes to infinity.  For N=40, K=7, T=10000000 this function runs 
   in under a minute returning sdiff ~= 0.01, smax ~= 5e-5.
"""

function test_Rsample( T::Int64, N::Int64, K::Int64 )
  Btbl = BT(K,N)
  CTR = counter(Vector{ConfigInt})
  PROBS = Dict{Vector{ConfigInt},Float64}()  # probabilities from samples
  SPROBS = Dict{Vector{ConfigInt},Float64}()  # probabilities from sprob function
  for i = 1:T   # count configs generated by Rsample
    rsmpl = map(ConfigInt,Rsample(N,K,Btbl))  # convert sample to ConfigInts
    push!(CTR,sort(rsmpl))
  end
  CN_K = ncfgs(N,K)  # All configs for N and K
  for c in CN_K
    PROBS[c] = 0.0  # make sure that all configs are in this dictionary
    SPROBS[c] = sprob(map(Int64,c))
  end
  mult = 1.0/Float64(T)
  for cfg in keys(CTR)
    PROBS[cfg] = CTR[cfg]*mult     # Add the probabilities from CTR
  end
  sdiff = 0.0
  smax = 0.0
  for c in CN_K
    ddif = abs(PROBS[c]-SPROBS[c])
    sdiff += ddif
    smax = ddif > smax ? ddif : smax
  end
  return sdiff, smax
end
